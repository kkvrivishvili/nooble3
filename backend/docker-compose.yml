version: '3.8'

services:
  # Base de datos PostgreSQL con extensiones de Supabase
  supabase:
    build:
      context: ./docker/supabase
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    volumes:
      - supabase-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - JWT_SECRET=${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      - JWT_EXP=${JWT_EXPIRY:-3600}

  # Supabase Studio (UI para administrar la base de datos)
  studio:
    image: supabase/studio:latest
    container_name: supabase-studio
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION:-Default Organization}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT:-Default Project}
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL:-http://localhost:8000}
      SUPABASE_ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNreXBsYW5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODk3MTAwMDAsImV4cCI6MTY4OTcxMzYwMH0.v9Avcfi2PVq-AYrfhZ9YXsxukgz1t3zZlL--9wUB-b0}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNreXBsYW5lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY4OTcxMDAwMCwiZXhwIjoxNjg5NzEzNjAwfQ.iE5vp5iV_4oSBK1d9YUQ26ynE-dTjOYxwaqP8-siMSA}
      AUTH_JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      NEXT_PUBLIC_ENABLE_LOGS: true
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
    depends_on:
      - kong
      - meta

  # API Gateway
  kong:
    image: kong:2.8.1
    container_name: supabase-kong
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./docker/supabase/volumes/api/kong.yml:/var/lib/kong/kong.yml:ro

  # Servicio de Autenticación
  auth:
    image: supabase/gotrue
    container_name: supabase-auth
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_HOST: supabase
      GOTRUE_DB_PORT: 5432
      GOTRUE_DB_USER: supabase_auth_admin
      GOTRUE_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      GOTRUE_DB_DATABASE: ${POSTGRES_DB:-postgres}
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS:-}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      GOTRUE_JWT_EXPIRY: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-false}
    depends_on:
      supabase:
        condition: service_healthy

  # API RESTful para PostgreSQL
  rest:
    image: postgrest/postgrest:v11.2.0
    container_name: supabase-rest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD:-postgres}@supabase:5432/${POSTGRES_DB:-postgres}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS:-public,storage,graphql_public}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      supabase:
        condition: service_healthy

  # Servidor de tiempo real
  realtime:
    image: supabase/realtime
    container_name: supabase-realtime
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: supabase
      DB_PORT: 5432
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabase_realtime_encryption_key
      API_JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      SECRETS_ENCRYPTION_KEY: ${REALTIME_ENCRYPTION_KEY:-super-secret-realtime-encryption-key}
      SUBSCRIPTION_MAX_RECORD_SIZE_BYTES: 1073741824
    command:
      - server
    depends_on:
      supabase:
        condition: service_healthy

  # Servicio de almacenamiento
  storage:
    image: supabase/storage-api
    container_name: supabase-storage
    restart: unless-stopped
    environment:
      TENANT_ID: stub
      REGION: us-east-1
      GLOBAL_S3_BUCKET: storage
      SYSTEM_BUCKET_ID: stub_storage
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      DATABASE_URL: postgres://supabase_storage_admin:${POSTGRES_PASSWORD:-postgres}@supabase:5432/${POSTGRES_DB:-postgres}
      PGREST_URL: http://rest:3000
      PGOPTIONS: -c search_path=storage,public
      FILE_SIZE_LIMIT: 52428800
      FILE_STORAGE_BACKEND: file
      STORAGE_BACKEND: file
      FILE_STORAGE_UPLOAD_DIRECTORY: /var/lib/storage
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - ./docker/supabase/volumes/storage:/var/lib/storage:Z
    depends_on:
      supabase:
        condition: service_healthy
      rest:
        condition: service_started
      imgproxy:
        condition: service_started

  # Metadata service para introspección de la base de datos
  meta:
    image: supabase/postgres-meta
    container_name: supabase-meta
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${POSTGRES_DB:-postgres}
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    depends_on:
      supabase:
        condition: service_healthy

  # Servicio de procesamiento de imágenes
  imgproxy:
    image: darthsim/imgproxy:v3.19.0
    container_name: supabase-imgproxy
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: :5001
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"

  # Edge Functions runtime
  functions:
    image: supabase/edge-runtime
    container_name: supabase-edge-functions
    restart: unless-stopped
    environment:
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNreXBsYW5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODk3MTAwMDAsImV4cCI6MTY4OTcxMzYwMH0.v9Avcfi2PVq-AYrfhZ9YXsxukgz1t3zZlL--9wUB-b0}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNreXBsYW5lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY4OTcxMDAwMCwiZXhwIjoxNjg5NzEzNjAwfQ.iE5vp5iV_4oSBK1d9YUQ26ynE-dTjOYxwaqP8-siMSA}
      SUPABASE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@supabase:5432/${POSTGRES_DB:-postgres}
      VERIFY_JWT: "${FUNCTIONS_VERIFY_JWT:-false}"
    ports:
      - "${FUNCTIONS_HTTP_PORT:-9000}:9000"
    volumes:
      - ./docker/supabase/volumes/functions:/home/deno/functions:Z
    command:
      - start
      - --main-service
      - /home/deno/functions/main
    depends_on:
      supabase:
        condition: service_healthy

  redis:
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  ollama:
    build:
      context: ./docker/ollama
      dockerfile: Dockerfile
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
      # Montar los scripts para que puedan ser ejecutados manualmente si es necesario
      - ./docker/ollama/scripts:/scripts
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - OLLAMA_LOG_LEVEL=info       # Ajustado para ver más información durante configuración
      - OLLAMA_VERBOSE=false        # Desactivar mensajes detallados
      - CUDA_VISIBLE_DEVICES=0      # Usar la primera GPU (RTX 3090)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always

  embedding-service:
    build:
      context: .
      dockerfile: docker/services/Dockerfile.embedding
    restart: always
    ports:
      - "8001:8001"
    volumes:
      - ./common:/app/common
      - ./embedding-service:/app/embedding-service
      - ./logs:/app/logs
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      # Variables de credenciales
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL:-postgresql://postgres:postgres@supabase:5432/nooble3_db}
      - SUPABASE_KEY=${SUPABASE_KEY:-postgres}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-postgres}
      
      # Variables de identificación del servicio
      - SERVICE_NAME=embedding-service
      - DOCKER_CONTAINER=true
      
      # Variables de conexión con servicios
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_API_URL=http://ollama:11434
      
      # Variables de configuración multi-tenant
      - TENANT_ID=default
      - CONFIG_ENVIRONMENT=development
      - LOAD_CONFIG_FROM_SUPABASE=true
      
      # Variables de configuración general
      - LOG_LEVEL=INFO
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - DEFAULT_OLLAMA_EMBEDDING_MODEL=${DEFAULT_OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
      - DEFAULT_OLLAMA_LLM_MODEL=${DEFAULT_OLLAMA_LLM_MODEL:-qwen3:1.7b}
    depends_on:
      redis:
        condition: service_healthy
      supabase:
        condition: service_healthy
      ollama:
        condition: service_started

  query-service:
    build:
      context: .
      dockerfile: docker/services/Dockerfile.query
    restart: always
    ports:
      - "8002:8002"
    volumes:
      - ./common:/app/common
      - ./query-service:/app/query-service
      - ./logs:/app/logs
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      # Variables de credenciales
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL:-postgresql://postgres:postgres@supabase:5432/nooble3_db}
      - SUPABASE_KEY=${SUPABASE_KEY:-postgres}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-postgres}
      
      # Variables de identificación del servicio
      - SERVICE_NAME=query-service
      - DOCKER_CONTAINER=true
      
      # Variables de conexión con servicios
      - REDIS_URL=redis://redis:6379/0
      - EMBEDDING_SERVICE_URL=http://embedding-service:8001
      - OLLAMA_API_URL=http://ollama:11434
      
      # Variables de configuración multi-tenant
      - TENANT_ID=default
      - CONFIG_ENVIRONMENT=development
      - LOAD_CONFIG_FROM_SUPABASE=true
      
      # Variables de configuración general
      - LOG_LEVEL=INFO
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - DEFAULT_OLLAMA_EMBEDDING_MODEL=${DEFAULT_OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
      - DEFAULT_OLLAMA_LLM_MODEL=${DEFAULT_OLLAMA_LLM_MODEL:-qwen3:1.7b}
    depends_on:
      redis:
        condition: service_healthy
      supabase:
        condition: service_healthy
      embedding-service:
        condition: service_started
      ollama:
        condition: service_started

  agent-service:
    build:
      context: .
      dockerfile: docker/services/Dockerfile.agent
    restart: always
    ports:
      - "8003:8003"
    volumes:
      - ./common:/app/common
      - ./agent-service:/app/agent-service
      - ./logs:/app/logs
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      # Variables de credenciales
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL:-postgresql://postgres:postgres@supabase:5432/nooble3_db}
      - SUPABASE_KEY=${SUPABASE_KEY:-postgres}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-postgres}
      
      # Variables de identificación del servicio
      - SERVICE_NAME=agent-service
      - DOCKER_CONTAINER=true
      
      # Variables de conexión con servicios
      - REDIS_URL=redis://redis:6379/0
      - EMBEDDING_SERVICE_URL=http://embedding-service:8001
      - QUERY_SERVICE_URL=http://query-service:8002
      - OLLAMA_API_URL=http://ollama:11434
      
      # Variables de configuración multi-tenant
      - TENANT_ID=default
      - CONFIG_ENVIRONMENT=development
      - LOAD_CONFIG_FROM_SUPABASE=true
      
      # Variables de configuración general
      - LOG_LEVEL=INFO
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - DEFAULT_OLLAMA_EMBEDDING_MODEL=${DEFAULT_OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
      - DEFAULT_OLLAMA_LLM_MODEL=${DEFAULT_OLLAMA_LLM_MODEL:-qwen3:1.7b}
      - JOB_LOCK_EXPIRE_SECONDS=600
    depends_on:
      redis:
        condition: service_healthy
      supabase:
        condition: service_healthy
      embedding-service:
        condition: service_started
      query-service:
        condition: service_started
      ollama:
        condition: service_started

  ingestion-service:
    build:
      context: .
      dockerfile: docker/services/Dockerfile.ingestion
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./common:/app/common
      - ./ingestion-service:/app/ingestion-service
      - ./logs:/app/logs
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      # Variables de credenciales
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL:-postgresql://postgres:postgres@supabase:5432/nooble3_db}
      - SUPABASE_KEY=${SUPABASE_KEY:-postgres}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-postgres}
      
      # Variables de identificación del servicio
      - SERVICE_NAME=ingestion-service
      - DOCKER_CONTAINER=true
      
      # Variables de conexión con servicios
      - REDIS_URL=redis://redis:6379/0
      - EMBEDDING_SERVICE_URL=http://embedding-service:8001
      - QUERY_SERVICE_URL=http://query-service:8002
      - OLLAMA_API_URL=http://ollama:11434
      - JOB_LOCK_EXPIRE_SECONDS=600
      
      # Variables de configuración multi-tenant
      - TENANT_ID=default
      - CONFIG_ENVIRONMENT=development
      - LOAD_CONFIG_FROM_SUPABASE=true
      
      # Variables de configuración general
      - LOG_LEVEL=INFO
      - USE_OLLAMA=${USE_OLLAMA:-true}
      - DEFAULT_OLLAMA_EMBEDDING_MODEL=${DEFAULT_OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
      - DEFAULT_OLLAMA_LLM_MODEL=${DEFAULT_OLLAMA_LLM_MODEL:-qwen3:1.7b}
    depends_on:
      redis:
        condition: service_healthy
      supabase:
        condition: service_healthy
      embedding-service:
        condition: service_started
      ollama:
        condition: service_started

  worker-service:
    build:
      context: .
      dockerfile: docker/services/Dockerfile.worker
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./common:/app/common
      - ./worker-service:/app/worker-service
      - ./logs:/app/logs
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      # Variables de credenciales
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL:-postgresql://postgres:postgres@supabase:5432/nooble3_db}
      - SUPABASE_KEY=${SUPABASE_KEY:-postgres}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-postgres}
      
      # Variables de identificación del servicio
      - SERVICE_NAME=worker-service
      - DOCKER_CONTAINER=true
      
      # Variables de conexión con servicios
      - REDIS_URL=redis://redis:6379/0
      - EMBEDDING_SERVICE_URL=http://embedding-service:8001
      - QUERY_SERVICE_URL=http://query-service:8002
      - AGENT_SERVICE_URL=http://agent-service:8003
      - INGESTION_SERVICE_URL=http://ingestion-service:8000
      - OLLAMA_API_URL=http://ollama:11434
      - JOB_LOCK_EXPIRE_SECONDS=600
      
      # Variables de configuración multi-tenant
      - TENANT_ID=default
      - CONFIG_ENVIRONMENT=development
      - LOAD_CONFIG_FROM_SUPABASE=true
      
      # Variables de configuración general
      - LOG_LEVEL=INFO
      - MAX_WORKERS=3
    depends_on:
      redis:
        condition: service_healthy
      supabase:
        condition: service_healthy
      embedding-service:
        condition: service_started
      query-service:
        condition: service_started
      agent-service:
        condition: service_started
      ingestion-service:
        condition: service_started

volumes:
  supabase-data:
  redis-data:
  ollama-data:
  logs: